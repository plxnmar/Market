// <auto-generated />
using System;
using Market.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Market.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221214185323_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Market.Domain.Entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Market.Domain.Entity.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 2,
                            Count = 1,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            Count = 1,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 3,
                            CartId = 1,
                            Count = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Market.Domain.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Фрукты"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Овощи"
                        });
                });

            modelBuilder.Entity("Market.Domain.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBeenShipped")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Market.Domain.Entity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Market.Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Яблоко сорта «Карамелька» такое же сладкое, как и его название! Плоды с преобладающим красным румянцем порадуют нежной рассыпчатой мякотью и насыщенным медовым вкусом. «Карамелька» может служить прекрасным перекусом, а также самостоятельным десертом. Кроме того, из таких яблок получаются отличные компоты и варенья.",
                            ImgPath = "/img/apples3.jpg",
                            Name = "Яблоко Карамелька",
                            Price = 50m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Банан настолько популярный и любимый многими фрукт, что не нуждается в представлении! Яркий жёлтый цвет, нежная сладкая мякоть и насыщенный аромат делают его безусловным фаворитом среди взрослых и детей. Свежий банан очень питательный, поэтому помогает быстро утолить голод. Съесть его можно на ходу, не запачкав руки, ведь банан очень удобно чистить. Этот фрукт широко применяются в кулинарии. Без них не было бы детского питания, нежных панкейков, творожков, йогуртов и мюсли.",
                            ImgPath = "/img/bannana.jpg",
                            Name = "Банан",
                            Price = 70m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Этот овощ популярен и любим во всём мире! Жареные золотистые дольки, ароматное пюре из детства, цельные клубни, сваренные «в мундире» – картофель прекрасен в любых кулинарных проявлениях. Вкус этого продукта столь же уникален, как и он сам. В приготовленном виде он, как правило, имеет мягкую крахмалистую текстуру и сладковатый привкус. Какая бы кулинарная идея с участием картофеля ни пришла вам в голову, воплотить её будет нетрудно!",
                            ImgPath = "/img/potatos.jpg",
                            Name = "Картофель, 400г",
                            Price = 44m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Гладкие огурцы, как правило, длиннее обычных и покрыты гладкой глянцевой кожицей. Этот сорт идеально подходит для приготовления различных закусок. Они не горчат, обладают отличным вкусом и выразительным ароматом. Благодаря плотной и в то же время очень нежной мякоти, из них получаются превосходные овощные роллы. Гладкие огурцы удобно нарезать тонкими пластинками, которые легко сворачиваются в рулетики. В качестве начинки попробуйте тунец, лосось или творог с чесноком и зеленью.",
                            ImgPath = "/img/cucmbers.jpg",
                            Name = "Огурцы, 200г",
                            Price = 30m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Мандарины любят многие, ведь они дарят ощущение ностальгии по детству. Без их вкуса и аромата просто не существует новогоднего стола и праздничного настроения! Эти маленькие цитрусы имеют сочную мякоть и искристый кисло-сладкий вкус. Разделить такой фрукт с кем-то приятным – что может быть лучше! А еще с мандарином можно смело экспериментировать в кулинарии. Попробуйте приготовить лёгкий салат, добавив к мандарину камамбер и руколу.",
                            ImgPath = "/img/mandarin.jpg",
                            Name = "Мандарины, 100г",
                            Price = 70m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Легендарное египетское манго снова в городе!\r\nСладко-сочное, безволокнистое, с нежной бархатистой текстурой. Обманчиво зелёное снаружи, но идеально спелое внутри. Манго уже можно купить в наших магазинах или заказать на дом с бесплатной доставкой.\r\nВес одного манго — от 500 грамм. ",
                            ImgPath = "/img/mango.jpg",
                            Name = "Манго, 1 шт",
                            Price = 90m
                        });
                });

            modelBuilder.Entity("Market.Domain.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Market.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique()
                        .HasFilter("[CartId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            Password = "3DA24438DA894C18C863FFD9C9D2F1D6C98FE1633BEA6B56FE4EB1B95A927579",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "user123",
                            Password = "CBB9B63D553D88A72F0D8AFE8B14800A8511028FE03CD5D37D18B15B9E2A7BB8",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Market.Domain.Entity.CartItem", b =>
                {
                    b.HasOne("Market.Domain.Entity.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Market.Domain.Entity.Order", b =>
                {
                    b.HasOne("Market.Domain.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Market.Domain.Entity.OrderItem", b =>
                {
                    b.HasOne("Market.Domain.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Domain.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Market.Domain.Entity.Product", b =>
                {
                    b.HasOne("Market.Domain.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Market.Domain.Entity.User", b =>
                {
                    b.HasOne("Market.Domain.Entity.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("Market.Domain.Entity.User", "CartId");

                    b.HasOne("Market.Domain.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Market.Domain.Entity.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Market.Domain.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Market.Domain.Entity.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Market.Domain.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Market.Domain.Entity.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
